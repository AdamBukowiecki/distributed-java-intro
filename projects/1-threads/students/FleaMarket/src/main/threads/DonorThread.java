package main.threads;

import java.util.Random;

import main.actors.Chairman;
import main.actors.Donor;
import main.models.Item;
import main.models.ItemsNameGenerator;

public class DonorThread extends Thread {

	private volatile Donor parent;
	private volatile boolean isRunning;
	
	public DonorThread(Donor d) {
		super();
		parent = d;
		isRunning = true;
	}
	
	@Override
	public void run() {
		
		Item item = null;
		while(isRunning) {
			try {
				
				// Create new item with name generated by ItemsNameGenerator
				item = new Item(ItemsNameGenerator.generateName());
				
				// Try until you register the item
				while(!Chairman.getInstance().addNewItem(item))
					Thread.sleep(1000);
				
				// Waiting, just waiting
				waitForNextItem();
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		parent.sayGoodBye();
		
	}
	
	private void waitForNextItem() {
		Random rand = new Random();
		int sleepTime = 1000 * (rand.nextInt(25) + 5);
		int secCounter = 0;
		while(isRunning && secCounter < 100) {
			try {
				Thread.sleep(sleepTime/100);
			} catch (InterruptedException e) {
				System.out.println(sleepTime);
				e.printStackTrace();
			}
			secCounter++;
		}
	}

	public void setRunning(boolean b) {
		isRunning = b;
	}
	
}
